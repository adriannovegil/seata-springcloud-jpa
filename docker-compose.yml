version: '3.3'
services:

  # Databases
  # ==========================================================================
  # The official MySQL (https://hub.docker.com/_/mysql/) supports only one
  # MYSQL_DATABASE environment variable.
  # By modifying the entrypoint and passing shell script, you can create multiple
  # dbs without having to make a mysql image just for this purpose.
  #
  # Account Data Base
  account-service-db:
    image: mysql:5.7
    container_name: seata-account-service-db
    environment:
      - MYSQL_USER=root
      - MYSQL_ROOT_PASSWORD=123456
    volumes:
      - ./account-service/db:/docker-entrypoint-initdb.d
    entrypoint:
      sh -c "/usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    ports:
      - 3306:3306

  # Order Data Base
  order-service-db:
    image: mysql:5.7
    container_name: seata-order-service-db
    environment:
      - MYSQL_USER=root
      - MYSQL_ROOT_PASSWORD=123456
    volumes:
      - ./order-service/db:/docker-entrypoint-initdb.d
    entrypoint:
      sh -c "/usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    ports:
      - 3308:3306

  # Storage Data Base
  storage-service-db:
    image: mysql:5.7
    container_name: seata-storage-service-db
    environment:
      - MYSQL_USER=root
      - MYSQL_ROOT_PASSWORD=123456
    volumes:
      - ./storage-service/db:/docker-entrypoint-initdb.d
    entrypoint:
      sh -c "/usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    ports:
      - 3307:3306

  # Metrics
  # ============================================================================
  # Agent
  agent:
    build: ./docker/agent
    image: inspectit/inspectit-agent
    container_name: inspectit-agent
    volumes:
      - agent-vol:/agent

  # InfluxDB
  influxdb-server:
    image: influxdb:1.7.1
    container_name: seata-influxdb-server
    environment:
      - INFLUXDB_HTTP_FLUX_ENABLED=true
      - INFLUXDB_HTTP_LOG_ENABLED=false
      - INFLUXDB_DATA_QUERY_LOG_ENABLED=false
    volumes:
      - ./docker/influxdb-server:/docker-entrypoint-initdb.d
    ports:
      - 8086:8086

  # Agent config server
  ocelot-config-server:
    image: inspectit/inspectit-ocelot-configurationserver:${INSPECTIT_OCELOT_VERSION}
    container_name: ocelot-config-server
    environment:
      - INSPECTIT_CONFIG_SERVER_WORKING_DIRECTORY=/configuration-server
      - INSPECTIT_CONFIG_SERVER_DEFAULT_USER_PASSWORD=demo
    depends_on:
      - influxdb-server
    ports:
      - 8090:8090

  # Grafana
  grafana-server:
    build: ./docker/grafana-server
    image: seata/seata-grafana-server
    container_name: seata-grafana-server
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=demo
      - GF_PATHS_PROVISIONING=/usr/share/grafana/custom/
    volumes:
      - ./docker/grafana-server/provisioning:/usr/share/grafana/custom/
    depends_on:
      - influxdb-server
    ports:
      - 3000:3000

  # Trazing
  # ============================================================================
  # Zipkin
  zipkin-server:
    image: openzipkin/zipkin
    container_name: seata-zipkin-server
    ports:
      - 9411:9411

  # Infrastructure
  # ==========================================================================
  # Discovery service
  discovery-server:
    image: seata-springcloud-jpa/discovery-server
    container_name: discovery-server
    environment:
      - INSPECTIT_SERVICE_NAME=discovery-server
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=false
      - INSPECTIT_EXPORTERS_METRICS_INFLUX_URL=http://influxdb-server:8086
      - INSPECTIT_EXPORTERS_TRACING_ZIPKIN_URL=http://zipkin-server:9411/api/v2/spans
    depends_on:
      - ocelot-config-server
      - agent
    entrypoint: ["sh", "-c","
      ./dockerize -wait=tcp://ocelot-config-server:8090 -timeout=300s -- &&
      java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Djava.security.egd=file:/dev/./urandom
      -javaagent:/agent/inspectit-ocelot-agent.jar
      -jar /app.jar"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8761:8761

  # Distributed transactions
  # ============================================================================
  # SEATA server database
  seata-server-db:
    image: mysql:5.7
    container_name: seata-server-db
    environment:
      - MYSQL_USER=root
      - MYSQL_ROOT_PASSWORD=123456
    volumes:
      - ./docker/seata-server/db:/docker-entrypoint-initdb.d
    entrypoint:
      sh -c "/usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    ports:
      - 3309:3306

  # SEATA server
  seata-server:
    build: ./docker/seata-server
    image: seata-springcloud-jpa/seata-server
    container_name: seata-server
    environment:
      - INSPECTIT_SERVICE_NAME=seata-server
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=false
      - INSPECTIT_EXPORTERS_METRICS_INFLUX_URL=http://influxdb-server:8086
      - INSPECTIT_EXPORTERS_TRACING_ZIPKIN_URL=http://zipkin-server:9411/api/v2/spans
      - SEATA_PORT=8091
      - STORE_MODE=db
    depends_on:
      - ocelot-config-server
      - agent
      - seata-server-db
    entrypoint: ["sh", "-c","
      ./dockerize -wait=tcp://ocelot-config-server:8090 -timeout=300s -- &&
      /opt/seata/bin/seata-server.sh --storeMode db"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8091:8091
      - 9898:9898

  # Services
  # ==========================================================================
  # Account service
  account-service:
    image: seata-springcloud-jpa/account-service
    container_name: seata-account-service
    environment:
      - INSPECTIT_SERVICE_NAME=account-service
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=false
      - INSPECTIT_EXPORTERS_METRICS_INFLUX_URL=http://influxdb-server:8086
      - INSPECTIT_EXPORTERS_TRACING_ZIPKIN_URL=http://zipkin-server:9411/api/v2/spans
    depends_on:
      - ocelot-config-server
      - agent
      - account-service-db
      - discovery-server
      - seata-server
    entrypoint: ["sh", "-c","
      ./dockerize -wait=tcp://discovery-server:8761 -wait=tcp://seata-server:8091 -timeout=300s -- &&
      java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Djava.security.egd=file:/dev/./urandom
      -javaagent:/agent/inspectit-ocelot-agent.jar
      -jar /app.jar"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8083:8083

  # Business service
  business-service:
    image: seata-springcloud-jpa/business-service
    container_name: seata-business-service
    environment:
      - INSPECTIT_SERVICE_NAME=business-service
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=false
      - INSPECTIT_EXPORTERS_METRICS_INFLUX_URL=http://influxdb-server:8086
      - INSPECTIT_EXPORTERS_TRACING_ZIPKIN_URL=http://zipkin-server:9411/api/v2/spans
    depends_on:
      - ocelot-config-server
      - agent
      - discovery-server
      - seata-server
    entrypoint: ["sh", "-c","
      ./dockerize -wait=tcp://discovery-server:8761 -wait=tcp://seata-server:8091 -timeout=300s -- &&
      java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Djava.security.egd=file:/dev/./urandom
      -javaagent:/agent/inspectit-ocelot-agent.jar
      -jar /app.jar"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8084:8084

  # Order service
  order-service:
    image: seata-springcloud-jpa/order-service
    container_name: seata-order-service
    environment:
      - INSPECTIT_SERVICE_NAME=order-service
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=false
      - INSPECTIT_EXPORTERS_METRICS_INFLUX_URL=http://influxdb-server:8086
      - INSPECTIT_EXPORTERS_TRACING_ZIPKIN_URL=http://zipkin-server:9411/api/v2/spans
    depends_on:
      - ocelot-config-server
      - agent
      - discovery-server
      - order-service-db
      - seata-server
    entrypoint: ["sh", "-c","
      ./dockerize -wait=tcp://discovery-server:8761 -wait=tcp://seata-server:8091 -timeout=300s -- &&
      java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Djava.security.egd=file:/dev/./urandom
      -javaagent:/agent/inspectit-ocelot-agent.jar
      -jar /app.jar"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8082:8082

  # Storage service
  storage-service:
    image: seata-springcloud-jpa/storage-service
    container_name: seata-storage-service
    environment:
      - INSPECTIT_SERVICE_NAME=storage-service
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=false
      - INSPECTIT_EXPORTERS_METRICS_INFLUX_URL=http://influxdb-server:8086
      - INSPECTIT_EXPORTERS_TRACING_ZIPKIN_URL=http://zipkin-server:9411/api/v2/spans
    depends_on:
      - ocelot-config-server
      - agent
      - discovery-server
      - storage-service-db
      - seata-server
    entrypoint: ["sh", "-c","
      ./dockerize -wait=tcp://discovery-server:8761 -wait=tcp://seata-server:8091 -timeout=300s -- &&
      java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Djava.security.egd=file:/dev/./urandom
      -javaagent:/agent/inspectit-ocelot-agent.jar
      -jar /app.jar"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8081:8081

  # Load
  # ============================================================================
  # Load server
  load-server:
    build: ./docker/load-server
    image: seata-springcloud-jpa/load-server
    container_name: seata-load-server
    depends_on:
      - account-service
      - business-service
      - order-service
      - storage-service

volumes:
  agent-vol:
